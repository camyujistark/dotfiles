# 
# Jira
#

jnew() {
  jira-cli new --type=$1 --priority=Medium --project LE $2 | grep issue | pbcopy;
}

jlist() {
  jira-cli view --search-jql="$1" --oneline
}

jmine() {
  # while true
  # do
      # load before clear
      todo=$(jira project_todo)
      inprogress=$(jira project_inprogress)
      inreview=$(jira project_inreview)
      discussion=$(jira project_discussion)
      inqa=$(jira project_inqa)
      clear
      paste <(printf %s "$(fold -w 80 <<< $(echo $todo; echo ' \n \n \n \n'))") <(printf %s "$(fold -w 80 <<< $(echo $inprogress; echo $discussion; echo $inreview; echo $inqa))") | column -s $'\t' -t
      # echo 'here'
      # sleep 60
  # done
}

jharvest() {
  JIRA_ID=$1
  if [ -z "$JIRA_ID" ]; then
    echo "Need JIRA_ID to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py 'amica' 'gittask' "$(jira summary $JIRA_ID)" > /dev/null 2>&1 &
}

harvestTask() {
  DESCRIPTION=$1
  if [ -z "$DESCRIPTION" ]; then
    echo "Need DESCRIPTION to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py 'amica' 'gittask' "$DESCRIPTION" > /dev/null 2>&1 &
}

jrun () {
  PROJECT='divi'
  PROJECT_FILE_NAME='lsc_odrs_app'
  JIRA_ID=$1
  BRANCH_CHECKOUT=$2
  NOTES_PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  CURRENT_BRANCH=$( git branch | grep '*' | cut -d ' ' -f2)
  BASE_FILE_NAME=$(basename `git rev-parse --show-toplevel`)
  BASE_BRANCH='DIVI-145-consent-orders'

  if [[ $(git status -s) ]]; then
    echo "You have uncommited changes. please update first";
    return
  fi

  if [ $BASE_FILE_NAME != $PROJECT_FILE_NAME ]; then
    echo "JRUN: must be in project $PROJECT_FILE_NAME for jrun to work";
    return
  fi

  if [ -z $JIRA_ID ]; then
    # get fzf of latest branches from git reflog
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
    if [ -z $JIRA_ID ]; then
      echo "JIRA_ID does not exist"
      return
    fi
    if ! [[ $JIRA_ID =~ '^[0-9]+$' ]]; then
      echo "JIRA_ID is not a number"
      return
    fi
  fi

  if [ -z $BRANCH_CHECKOUT ] && [ $CURRENT_BRANCH != 'develop' ]; then
    echo "GIT: switching to $BASE_BRANCH branch";
    git checkout $BASE_BRANCH;
    git pull;
  fi

  if [ $BRANCH_CHECKOUT ]; then 
    echo "GIT: switching to $BRANCH_CHECKOUT";
    git checkout $BRANCH_CHECKOUT;
    git pull;
  fi

  BRANCHNAME=$(jira branch $JIRA_ID)

  # Currently, you need to have a JIRA_ID so you cannot run on develop or
  # master. But here for safety measures
  if [ "$CURRENT_BRANCHNAME" = 'develop' ] || [ "$CURRENT_BRANCHNAME" = 'master' ]; then
    echo 'JRUN: cannot run on $CURRENT_BRANCHNAME';
    exit 0;
  fi

  # limitation to having the second pane to always have vim running with notes
  # note this is a hack atm. would like to make this more specific
  tmux select-window -t :-
  tmux send-keys -t 2 ":w"
  tmux send-keys -t 2 Enter
  tmux send-keys -t 2 ":q"
  tmux send-keys -t 2 Enter

  # If branch does exists then open the notes
  # issue here. Might exist local and not on remote
  if git rev-parse --verify $BRANCHNAME; then
    echo "GIT: $BRANCHNAME already exists";
    git checkout $BRANCHNAME;

    # If you have already deleted the fil then write again
    if [[ ! -f "$NOTES_PROJECTPATH/$BRANCHNAME.md" ]]; then
      jira view $JIRA_ID >> "$NOTES_PROJECTPATH/$BRANCHNAME.md";
    fi

    # JIRA transition to In Progress
    jtrans "In Progress" $JIRA_ID

    # HARVEST Start timer harvest with branch
    # NOTE: would like to update this in future so not all over the place
    jharvest $JIRA_ID

  # NOTES open in first window pane 2
    tmux send-keys -t 2 "vim $NOTES_PROJECTPATH/$BRANCHNAME.md"
    tmux send-keys -t 2 Enter;
    return;
  fi

  # GIT creat branch
  echo "GIT: checking out and creating $BRANCHNAME";
  git checkout -b $BRANCHNAME

  ## NOTES add notes to view
  jira view $JIRA_ID >> "$NOTES_PROJECTPATH/$BRANCHNAME.md";

  # JIRA transition to In Progress
  jtrans "In Progress" $JIRA_ID

  # HARVEST Start timer harvest with branch
  # NOTE: would like to update this in future so not all over the place
  jharvest $JIRA_ID

  # NOTES open in first window pane 2
  tmux send-keys -t 2 "vim $NOTES_PROJECTPATH/$BRANCHNAME.md"
  tmux send-keys -t 2 Enter;
}

jqa() {
  JIRA_ID=$1
  QA_PERSON=$2
  DEFAULT_QA_PERSON='Wesley Fermin'
  QA_WORKFLOW='QA ready'
  if [[ $JIRA_ID ]]; then
    if [[ $QA_PERSON ]]; then
      jira transition --noedit "$QA_WORKFLOW" "$JIRA_ID" && jira assign "$JIRA_ID" "$QA_PERSON"
    else
      jira transition --noedit "$QA_WORKFLOW" "$JIRA_ID" && jira assign "$JIRA_ID" "$DEFAULT_QA_PERSON"
    fi
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jnotes() {
	PROJECT='divi'
	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  if [[ -z "$1" ]]; then
    SEARCH='\- \[ \]'
  else
    SEARCH="$( echo $1 | sed 's/\([^[:alnum:]]\)/\\\1/g' | tr '[:upper:]' '[:lower:]')"
  fi

  TODOSELECT=$(awk 'function branchname(file) {
    sub(".*/", "", file)
    sub("\.md", "", file)
    return file
  }
  tolower($0) ~ /'$SEARCH'/{print branchname(FILENAME), "---", $0}' $PROJECTPATH/* | fzf)

  if [ $TODOSELECT ]; then
    BRANCHNAME=${TODOSELECT%% ---*} # Delete after
    # BRANCHNAME=${TODOSELECT##*------- } # Delete before
    tvim "$BRANCHNAME"
  fi
}

jtrans() {
  moveTo=$1
  JIRA_ID=$2

  if [ -z $JIRA_ID ]; then
    echo 'JIRA:Need arg with jira ticket id'
    return
  fi
  if [ -z $moveTo ]; then
    echo 'JIRA: Need a move to location'
    return
  fi
  ticketStatus="$(jira status $JIRA_ID)"
  if [ ! "$ticketStatus" ]; then
    echo "JIRA: ticket $JIRA_ID does not exist"
    return
  fi

  if [ "$ticketStatus" = "$moveTo" ]; then 
    echo "JIRA: Already on $moveTo status"
    return
  fi

  # status
  TODO_STATUS='To Do'
  INPROGRESS_STATUS='In Progress'
  MOVE_REVIEW_STATUS='Code review'
  # Note: Ticket review status is different to move review status
  TICKET_REVIEW_STATUS='In Review'
  QA_STATUS='QA Ready'

  # QA
  if [ "$moveTo" = "$QA_STATUS" ]; then
    if [ "$ticketStatus" = "$TICKET_REVIEW_STATUS" ]; then
      jqa $JIRA_ID
      return;
    else
      echo 'JIRA: ticket must be in Code review to move to QA Ready'
      return
    fi
  fi

  # Code Review
  if [ $moveTo = "$MOVE_REVIEW_STATUS" ] && [ $ticketStatus = "$TODO_STATUS" ]; then 
      jira transition "$INPROGRESS_STATUS" $JIRA_ID --noedit
  fi

  # Default
  jira transition "$moveTo" $JIRA_ID --noedit
}

jtransition() {
  JIRA_ID=$1
  if [ -z $JIRA_ID ]; then
    echo 'JIRA: Need arg with jira ticket id'
    return
  fi
  moveTo="$(echo 'Done\nBacklog\nFor Discussion\nQA Ready\nCode review\nIn Progress\nTo Do' | fzf)"
  jtrans $moveTo $JIRA_ID
}
