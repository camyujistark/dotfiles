
# 
# Jira
#

declare -A JIRA_IDS
JIRA_IDS[cam]=5d75d6b4458a170db4b034b8
JIRA_IDS[andy]=5b14dfa15c1b4f1bc453c303
JIRA_IDS[andrew]=n5a9348b119532839bda35443
JIRA_IDS[wesley]=557058:a9938b41-7745-45b5-bac9-85d659accf50

jnew() {
  jira-cli new --type=$1 --priority=Medium --project LE $2 | grep issue | pbcopy;
}

jlist() {
  jira-cli view --search-jql="$1" --oneline
}

jmine() {
  # while true
  # do
      # load before clear
      todo=$(jira project_todo)
      inprogress=$(jira project_inprogress)
      inreview=$(jira project_inreview)
      discussion=$(jira project_discussion)
      inqa=$(jira project_inqa)
      clear
      paste <(printf %s "$(fold -w 80 <<< $(echo $todo; echo ' \n \n \n \n'))") <(printf %s "$(fold -w 80 <<< $(echo $inprogress; echo $discussion; echo $inreview; echo $inqa))") | column -s $'\t' -t
      # echo 'here'
      # sleep 60
  # done
}

jharvest() {
  JIRA_ID=$1
  if [ -z "$JIRA_ID" ]; then
    echo "Need JIRA_ID to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py 'amica' 'gittask' "$(jira summary $JIRA_ID)" > /dev/null 2>&1 &
}

harvestTask() {
  DESCRIPTION=$1
  if [ -z "$DESCRIPTION" ]; then
    echo "Need DESCRIPTION to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py 'amica' 'gittask' "$DESCRIPTION" > /dev/null 2>&1 &
}

jrun () {
  PROJECT='divi'
  PROJECT_FILE_NAME='lsc_odrs_app'
  NOTES_PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  BASE_BRANCH='develop'
  CURRENT_BRANCH=$( git branch | grep '*' | cut -d ' ' -f2)
  BASE_FILE_NAME=$(basename `git rev-parse --show-toplevel`)
  JIRA_ID=$1
  BRANCH_CHECKOUT=$2

  if [ $JIRA_ID ]; then
    git checkout -b $(jira branch $JIRA_ID)
  else
    PS3='Please enter your choice: '
    jrunoptions=("Go to previous branch" "Create New Branch" "Create New Branch Start" "Find branch" "Quit")
    select opt in "${jrunoptions[@]}"
    do
        case $opt in
            "Go to previous branch")
                JIRA_ID=$(grl | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Create New Branch")
                jcreate $BASE_BRANCH
                return
                ;;
            "Create New Branch Start")
                jcreate $BASE_BRANCH
                JIRA_ID=$(grep issue /tmp/cstory.yml | awk '{print $2}')
                jinit $JIRA_ID
                return
                ;;
            "Find branch")
                JIRA_ID=$(git branch | fzf | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Quit")
                break
                ;;
            *) echo "invalid option $REPLY";;
        esac
    done
  fi
}

jassign() {
  JIRA_ID=$1
  if [[ $JIRA_ID ]]; then
    ASSIGNEE="$(echo 'cam\nandy\nandrew\nwesly' | fzf)"
    jira edit --noedit "$JIRA_ID" -o assigneeid="${JIRA_IDS[$ASSIGNEE]}"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jqa() {
  JIRA_ID=$1
  DEFAULT_QA_PERSON='wesley'
  QA_WORKFLOW='QA ready'
  if [[ $JIRA_ID ]]; then
    jira transition --noedit "$QA_WORKFLOW" "$JIRA_ID" && jira edit --noedit "$JIRA_ID" -o assigneeid="${JIRA_IDS[$DEFAULT_QA_PERSON]}"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jtransition() {
  JIRA_ID=$1
  moveTo=$2
  if [ -z $JIRA_ID ]; then
    echo 'JIRA: Need arg with jira ticket id'
    return
  fi
  if [ -z $moveTo ]; then
    moveTo="$(echo 'Done\nBacklog\nFor Discussion\nQA Ready\nCode review\nIn Progress\nTo Do' | fzf)"
  fi
  ticketStatus="$(jira status $JIRA_ID)"
  if [ "$ticketStatus" = "$moveTo" ]; then 
    echo "JIRA: Already on $moveTo status"
    return
  fi
  jira transition "$moveTo" $JIRA_ID --noedit
}

jcreate () {
  BASEBRANCH="develop"
  if [ $1 ]; then
    BASEBRANCH=$1
  fi
  TYPE="$(echo 'Task\nBug' | fzf)"
  ASSIGNEE="$(echo 'cam\nandy\nandrew\nwesly' | fzf)"
  git checkout $BASEBRANCH && git pull
  jira create -p DIVI -i "$TYPE" -o assigneeid="${JIRA_IDS[$ASSIGNEE]}" --saveFile /tmp/cstory.yml
}

jopennotes() {
  JIRA_ID=$1
  BRANCHNAME=$(jira branch $JIRA_ID)

  # limitation to having the second pane to always have vim running with notes
  # note this is a hack atm. would like to make this more specific
  tmux select-window -t :-
  tmux send-keys -t 2 ":w"
  tmux send-keys -t 2 Enter
  tmux send-keys -t 2 ":q"
  tmux send-keys -t 2 Enter

  # If branch does exists then open the notes
  # issue here. Might exist local and not on remote
  if git rev-parse --verify $BRANCHNAME; then
    echo "GIT: $BRANCHNAME already exists";
    git checkout $BRANCHNAME;
  fi

  ## NOTES add notes to view
  if [[ ! -f "$NOTES_PROJECTPATH/$BRANCHNAME.md" ]]; then
    jira view $JIRA_ID >> "$NOTES_PROJECTPATH/$BRANCHNAME.md";
  fi

  # NOTES open in first window pane 2
  tmux send-keys -t 2 "vim $NOTES_PROJECTPATH/$BRANCHNAME.md"
  tmux send-keys -t 2 Enter;
}

jnotes() {
	PROJECT='divi'
	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  if [[ -z "$1" ]]; then
    SEARCH='\- \[ \]'
  else
    SEARCH="$( echo $1 | sed 's/\([^[:alnum:]]\)/\\\1/g' | tr '[:upper:]' '[:lower:]')"
  fi

  TODOSELECT=$(awk 'function branchname(file) {
    sub(".*/", "", file)
    sub("\.md", "", file)
    return file
  }
  tolower($0) ~ /'$SEARCH'/{print branchname(FILENAME), "---", $0}' $PROJECTPATH/* | fzf)

  if [ $TODOSELECT ]; then
    BRANCHNAME=${TODOSELECT%% ---*} # Delete after
    # BRANCHNAME=${TODOSELECT##*------- } # Delete before
    tvim "$BRANCHNAME"
  fi
}

jinit() {
  JIRA_ID=$1
  BRANCHNAME=$(jira branch $JIRA_ID)
  jharvest $JIRA_ID
  jira transition "In Progress" $JIRA_ID --noedit
  # jopennotes $JIRA_ID
  if git rev-parse --verify $BRANCHNAME; then
    git checkout $BRANCHNAME
  else
    git checkout -b $BRANCHNAME
  fi
}
