#
# Jira
#

BASE_JIRA_D_CONFIG="~/.jira.d/config.yml";

NOTES_PATH="$HOME/Documents/Notes/"

# EPIC: Per Epic
# BASE: Direct to base
# MASTER: Straight to master
BRANCH_METHOD="BASE"

getProjectYaml() {
  # TODO: Would like to maoke this something that checks the git root for project specific variables such as basebranch. but neet to merge both the parent with the project specific output
  # If not git path then will look in the current folder
  BASE_GIT_PATH="$(git rev-parse --show-toplevel 2> /dev/null || echo -n '.')"
  #  ${FILE%/*} will get you the parent folder
  PROJECT_YML="${BASE_GIT_PATH%/*}/.jira.d/config.yml"
  if [ ! -f $PROJECT_YML ]; then
    PROJECT_YML=$BASE_JIRA_D_CONFIG
  fi
  echo $PROJECT_YML
}

getProjectValue() {
  local PROJECT_YML=$(getProjectYaml)
  cat $PROJECT_YML | shyaml get-value $1
}

getProjectValues() {
  local PROJECT_YML=$(getProjectYaml)
  cat $PROJECT_YML | shyaml get-values $1
}

getConfigValue() {
  cat ~/.jira.d/config.yml | shyaml get-value $1
}

getConfigValues() {
  cat ~/.jira.d/config.yml | shyaml get-values $1
}

getConfigKeys() {
  cat ~/.jira.d/config.yml | shyaml keys $1
}

JIRA_USERNAMES=$(getConfigKeys users)

getWorkflowStatus() {
  LIST=$1
  while read -r line; do
    STATUS=$(jira project_status "$line")
    echo "$line $STATUS"
  done < <(getProjectValues "$LIST")
}

jmine() {
  # while true
  # do
      todo=$(getWorkflowStatus 'workflow.todo')
      other=$(getWorkflowStatus 'workflow.other')

      clear
      paste <(printf %s "$(fold -w 80 <<< $(echo $todo; echo ' \n \n \n \n'))") <(printf %s "$(fold -w 80 <<< $(echo $other; ))") | column -s $'\t' -t
      # echo 'here'
      # sleep 60
  # done
}

jhstart() {
  local JIRA_ID=$1
  DEFAULT_DEVELOPMENT_TASK=$(getProjectValue 'harvest.default_development_task')
  if [ -z "$JIRA_ID" ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
    if [ -z $JIRA_ID ]; then
      return
    fi
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py $DEFAULT_DEVELOPMENT_TASK "$(jira summary $JIRA_ID)" > /dev/null 2>&1 &
}

jhstop() {
  python $HOME/Documents/Scripts/harvest-api/harvestStopAll.py
}

harvestTask() {
  DESCRIPTION=$1
  DEFAULT_DEVELOPMENT_TASK=$(getProjectValue 'harvest.default_development_task')
  if [ -z "$DESCRIPTION" ]; then
    echo "Need DESCRIPTION to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py $DEFAULT_DEVELOPMENT_TASK  "$DESCRIPTION" > /dev/null 2>&1 &
}

jr () {
  local BASEBRANCH=$(getProjectValue 'basebranch')
  if [ $2 ]; then
    BASEBRANCH=$2
  fi
  setBranch "$BASEBRANCH" 'develop'

  local JIRA_ID=$1

  if [ $JIRA_ID ]; then
    jinit $JIRA_ID
  else
    PS3='Please enter your choice: '
    jroptions=("Go to previous branch" "Create New Branch" "Create New Branch Start" "Find branch" "Quit")
    select opt in "${jroptions[@]}"
    do
        case $opt in
            "Go to previous branch")
                JIRA_ID=$(grl | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Create New Branch")
                jcreate $BASEBRANCH
                return
                ;;
            "Create New Branch Start")
                jcreate $BASEBRANCH
                JIRA_ID=$(grep issue /tmp/cstory.yml | awk '{print $2}')
                jinit $JIRA_ID
                return
                ;;
            "Find branch")
                JIRA_ID=$(git branch | fzf | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Quit")
                break
                ;;
            *) echo "invalid option $REPLY";;
        esac
    done
  fi
}

jassign() {
  local JIRA_ID=$1
  if [[ $JIRA_ID ]]; then
    local ASSIGNEE="users.$(echo $JIRA_USERNAMES | fzf)"
    local ASSIGNEE_ID=$(getConfigValue $ASSIGNEE)
    jira edit --noedit "$JIRA_ID" -o assigneeid="$ASSIGNEE_ID"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jqa() {
  local JIRA_ID=$1
  if [[ $JIRA_ID ]]; then
    ticketStatus="$(jira status $JIRA_ID)"
    if [ "$ticketStatus" = "To Do" ]; then 
      jira transition "In Progress" $JIRA_ID --noedit
      jira transition "Code Review" $JIRA_ID --noedit
    fi
    if [ "$ticketStatus" = "In Progress" ]; then 
      jira transition "Code Review" $JIRA_ID --noedit
    fi
    jira transition "QA Ready" $JIRA_ID --noedit
    local ASSIGNEE_ID=$(getConfigValue "users.wesley")
    jira edit --noedit "$JIRA_ID" -o assigneeid="$ASSIGNEE_ID"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jtransition() {
  local JIRA_ID=$1
  local moveTo=$2
  local JIRA_WORKFLOW_TODO=$(getProjectValues 'workflow.todo')
  local JIRA_WORKFLOW_OTHER=$(getProjectValues 'workflow.other')
  local JIRA_WORKFLOW=$(echo $JIRA_WORKFLOW_TODO; echo $JIRA_WORKFLOW_OTHER)

  if [ -z $JIRA_ID ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
  fi
  if [ -z $moveTo ]; then
    moveTo="$(echo $JIRA_WORKFLOW | fzf)"
  fi
  ticketStatus="$(jira status $JIRA_ID)"
  if [ "$ticketStatus" = "$moveTo" ]; then 
    echo "JIRA: Already on $moveTo status"
    return
  fi
  jira transition "$moveTo" $JIRA_ID --noedit
}

jcreate () {
  local BASEBRANCH=$(getProjectValue 'basebranch')
  if [ $1 ]; then
    BASEBRANCH=$1
  fi
  local TYPE="$(echo 'Task\nBug' | fzf)"
  local ASSIGNEE="users.$(echo $JIRA_USERNAMES | fzf)"
  local ASSIGNEE_ID=$(getConfigValue $ASSIGNEE)
  git checkout $BASEBRANCH && git pull
  jira create -i "$TYPE" -o assigneeid="$ASSIGNEE_ID" --saveFile /tmp/cstory.yml
  jopen $JIRA_ID
}

setBranch() {
  local BRANCHNAME=$1
  local BASEBRANCH=$2

  if [ -z $BRANCHNAME ]; then
    echo 'Need a argument with branchname'
    exit 1
  fi

  if [ -z $BASEBRANCH ]; then
    echo 'Need a base branch'
    exit 1
  fi

  if [[ `git branch --list $BRANCHNAME` ]]; then
    git checkout $BRANCHNAME
    git pull
  else
    git checkout $BASEBRANCH
    git checkout -b $BRANCHNAME
    # You cannot have a pr at this stage
    # gitppr;
  fi
}

generateBranchName() {
  local JIRA_ID=$1
  local EPIC_FLAG="feature"
  local BRANCHNAME=$(git branch --show-current)
  if [ $JIRA_ID ]; then
    BRANCHNAME=$(jira branch $JIRA_ID)
    ISSUETYPE=$(jira issuetype $JIRA_ID) 
    if [ "$ISSUETYPE" = 'Epic' ]; then
      BRANCHNAME="$EPIC_FLAG/$BRANCHNAME"
    fi
  fi
  echo "$BRANCHNAME"
}

createJiraBranches() {
  local JIRA_ID=$1

  if [ -z "$JIRA_ID" ]; then
    exit 1
  fi

  if [[ $(git status -s) ]]; then 
    echo 'You have uncommited changes. please fix first'
    exit 1;
  fi

  local BASEBRANCH=$(getProjectValue 'basebranch')
  local BRANCHNAME=$(generateBranchName $JIRA_ID)

  if [[ -z $BRANCHNAME ]]; then
    echo 'jira id does not exist. branchname cannot be generated'
    exit 1;
  fi

  echo "base: $BASEBRANCH"

  if [ $BRANCH_METHOD = 'EPIC' ]; then
    local EPIC_KEY=$(jira epickey $JIRA_ID)
    if [ "$EPIC_KEY" ]; then
      EPIC_FLAG="feature"
      EPIC_BRANCH="$EPIC_FLAG/$(jira branch $EPIC_KEY)"
      EPIC_BRANCH_LOC="${EPIC_BRANCH}-LOC"

      echo "epic: $EPIC_BRANCH"
      jopennotes $EPIC_KEY
      # remote
      setBranch "$EPIC_BRANCH" $BASEBRANCH
      if [[ ! `git branch --list $BRANCHNAME` ]]; then
        gitpu
      fi
      # local
      setBranch "$EPIC_BRANCH_LOC" "$EPIC_BRANCH"
      BASEBRANCH=$EPIC_BRANCH_LOC
    fi

    local PARENT_TASK_KEY=$(jira parentkey $JIRA_ID)
    if [ "$PARENT_TASK_KEY" ]; then
      PARENT_BRANCH=$(jira branch $PARENT_TASK_KEY)
      PARENT_BRANCH_LOC="${PARENT_BRANCH}-LOC"
      echo "parent: $PARENT_BRANCH"
      jopennotes $PARENT_BRANCH
      # remote
      setBranch "$PARENT_BRANCH" $BASEBRANCH
      if [[ ! `git branch --list $BRANCHNAME` ]]; then
        gitpu
      fi
      # local
      setBranch "$PARENT_BRANCH_LOC" "$PARENT_BRANCH"
      BASEBRANCH=$PARENT_BRANCH_LOC
    fi
    echo "creating: $BRANCHNAME"
    if [[ `git branch --list $BRANCHNAME` ]]; then
      git checkout $BRANCHNAME
    else
      git checkout $BASEBRANCH
      git checkout -b $BRANCHNAME
    fi
  fi

  if [ $BRANCH_METHOD = 'BASE' ]; then
    # Branch from LOC
    echo "creating: $BRANCHNAME"
    setBranch "${BASEBRANCH}-LOC" "$BASEBRANCH"
    BASEBRANCH=$PARENT_BRANCH_LOC
    if [[ `git branch --list $BRANCHNAME` ]]; then
      git checkout $BRANCHNAME
    else
      git checkout $BASEBRANCH
      git checkout -b $BRANCHNAME
    fi
  fi
}

jcleanup() {
  if [ ! $BRANCH_METHOD = 'BASE' ]; then
    echo "have no method for none BASE method atm"
    exit 1
  fi

  local BRANCHNAME=$(git branch --show-current)
  local BASEBRANCH=$(getProjectValue 'basebranch')

  # Waterfall
  git checkout master &&
  git pull &&
  git checkout develop &&
  git pull &&
  git checkout $BASEBRANCH &&
  git pull &&
  git checkout "${BASEBRANCH}-LOC" &&
  git pull &&
  git checkout $BRANCHNAME &&
  git pull &&

  # Rebase change for current branch
  # rebase to clean up your change
  git rebase -i "${BASEBRANCH}-LOC" &&
  git checkout "${BASEBRANCH}-LOC" &&
  # add to the local
  git merge "$BRANCHNAME" &&
  git checkout - &&
  # rebase to just the change from ground
  git rebase -i "${BASEBRANCH}"
}

generateNotesPath() {
  local JIRA_ID=$1
  local PROJECT=$(getProjectValue 'project')
  local NOTES_PROJECTPATH="$NOTES_PATH/$PROJECT"
  if [ ! -d $NOTES_PROJECTPATH ]; then
    mkdir $NOTES_PROJECTPATH;
  fi
  # local BRANCHNAME=$(generateBranchName $JIRA_ID)
  local BRANCH_MD_PATH="$NOTES_PROJECTPATH/$JIRA_ID.md"
  if [ ! -d ${BRANCH_MD_PATH%/*} ]; then
    mkdir -p ${BRANCH_MD_PATH%/*}
  fi
  # Return MD PATH
  echo $BRANCH_MD_PATH;
}

jopennotes() {

  local JIRA_ID=$1

  if [ -z $JIRA_ID ]; then
    echo "Need $JIRA_ID";
    exit 1;
  fi

  # Todo: Open tvim if you set it in param. Was not as easy as I thought
  local BRANCH_MD_PATH="$(generateNotesPath $JIRA_ID)"

  # Update Meta data
  # Note: Limitation is that we predict that its 12 lines of metddata. Would
  # like to make this a little better in future
  if [ -f "$BRANCH_MD_PATH" ]; then
    # Check first line
    HEAD_LINE=$(head -n 1 $BRANCH_MD_PATH)
    if [ "$HEAD_LINE" = "---" ]; then
      ##Temp file
      BRANCH_MD_TEMP_PATH="$BRANCH_MD_PATH.temp"
      touch $BRANCH_MD_TEMP_PATH

      ## TODO: if has lines
      ## Remove mardown meta 14 lines
      sed -i.bak '1,14d' "$BRANCH_MD_PATH"

      ## Make temp version
      cat "$BRANCH_MD_PATH" > "$BRANCH_MD_TEMP_PATH"

      ## Add new markdown meta
      jira view $JIRA_ID > "$BRANCH_MD_PATH"
      cat "$BRANCH_MD_TEMP_PATH" >> "$BRANCH_MD_PATH"
      ## clean up
      rm "$BRANCH_MD_TEMP_PATH"
      rm "$BRANCH_MD_PATH.bak"
    fi
  else
    touch "$BRANCH_MD_PATH"
    jira view $JIRA_ID > "$BRANCH_MD_PATH"
    echo "\n## Notes\n- " >> "$BRANCH_MD_PATH"
  fi
}

jopennotes_tmux() {
  local JIRA_ID=$1

  # limitation to having the second pane to always have vim running with notes
  # note this is a hack atm. would like to make this more specific
  tmux select-window -t :-
  tmux send-keys -t 2 ":w"
  tmux send-keys -t 2 Enter
  tmux send-keys -t 2 ":q"
  tmux send-keys -t 2 Enter

  jopennotes $JIRA_ID

  tmux send-keys -t 2 "tvim"
  tmux send-keys -t 2 Enter
}

# jnotes() {
# 	PROJECT='divi'
# 	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
#   if [[ -z "$1" ]]; then
#     SEARCH='\- \[ \]'
#   else
#     SEARCH="$( echo $1 | sed 's/\([^[:alnum:]]\)/\\\1/g' | tr '[:upper:]' '[:lower:]')"
#   fi
#
#   TODOSELECT=$(awk 'function branchname(file) {
#     sub(".*/", "", file)
#     sub("\.md", "", file)
#     return file
#   }
#   tolower($0) ~ /'$SEARCH'/{print branchname(FILENAME), "---", $0}' $PROJECTPATH/* | fzf)
#
#   if [ $TODOSELECT ]; then
#     BRANCHNAME=${TODOSELECT%% ---*} # Delete after
#     # BRANCHNAME=${TODOSELECT##*------- } # Delete before
#     tvim "$BRANCHNAME"
#   fi
# }
#
jinit() {
  local JIRA_ID=$1
  createJiraBranches $JIRA_ID
  jhstart $JIRA_ID
  jira transition "In Progress" $JIRA_ID --noedit
  jopennotes_tmux $JIRA_ID
  jopen $JIRA_ID
}

jopen() {
  local JIRA_ID=$1
  if [ -z $JIRA_ID ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
  fi
  JIRA_ID_TAB_EXISTS=$(chrome-cli list tabs | grep "$JIRA_ID")
  # Note need to enable chrome-cli in order for this to work
  if [ -z $JIRA_ID_TAB_EXISTS ] ; then
      $SCRIPT_PATH/openProfileInChrome/openInChromeSide.sh https://portableaustralia.atlassian.net/browse/$( git branch | grep '*' | cut -d ' ' -f2 | awk -F'-' '{print $1_-$2}')
  else
    echo "Tob already open"
  fi
}
