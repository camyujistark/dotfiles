
# 
# Jira
#

getConfigValue() {
  cat ~/.jira.d/config.yml | shyaml get-value $1
}

getConfigValues() {
  cat ~/.jira.d/config.yml | shyaml get-values $1
}

getConfigKeys() {
  cat ~/.jira.d/config.yml | shyaml keys $1
}

JIRA_USERNAMES=$(getConfigKeys users)
JIRA_WORKFLOW=$(getConfigValues workflow)
DEFAULT_DEVELOPMENT_TASK=$(getConfigValue 'harvest.default_development_task')

jnew() {
  jira-cli new --type=$1 --priority=Medium --project LE $2 | grep issue | pbcopy;
}

jlist() {
  jira-cli view --search-jql="$1" --oneline
}

jmine() {
  # while true
  # do
      # load before clear
      todo=$(jira project_todo 'To Do')
      inprogress=$(jira project_status 'In Progress' 'inprogress')
      inreview=$(jira project_status 'In Review' 'inreview')
      discussion=$(jira project_status 'Needs Discussion' 'discussion')
      inqa=$(jira project_status 'In QA' 'inqa')
      clear
      paste <(printf %s "$(fold -w 80 <<< $(echo $todo; echo ' \n \n \n \n'))") <(printf %s "$(fold -w 80 <<< $(echo $inprogress; echo $discussion; echo $inreview; echo $inqa))") | column -s $'\t' -t
      # echo 'here'
      # sleep 60
  # done
}

jhstart() {
  JIRA_ID=$1
  if [ -z "$JIRA_ID" ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
    if [ -z $JIRA_ID ]; then
      return
    fi
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py $DEFAULT_DEVELOPMENT_TASK "$(jira summary $JIRA_ID)" > /dev/null 2>&1 &
}

jhstop() {
  python $HOME/Documents/Scripts/harvest-api/harvestStopAll.py
}

harvestTask() {
  DESCRIPTION=$1
  if [ -z "$DESCRIPTION" ]; then
    echo "Need DESCRIPTION to run"
    return
  fi
  python $HOME/Documents/Scripts/harvest-api/harvestStart.py $DEFAULT_DEVELOPMENT_TASK  "$DESCRIPTION" > /dev/null 2>&1 &
}

jrun () {
  PROJECT='divi'
  PROJECT_FILE_NAME='lsc_odrs_app'
  BASE_BRANCH='develop'
  CURRENT_BRANCH=$( git branch | grep '*' | cut -d ' ' -f2)
  BASE_FILE_NAME=$(basename `git rev-parse --show-toplevel`)
  JIRA_ID=$1

  if [ $2 ]; then
    BASE_BRANCH=$2
  fi

  if [ $JIRA_ID ]; then
    git checkout $BASE_BRANCH
    git pull
    jcheckout $JIRA_ID
    jinit $JIRA_ID
  else
    PS3='Please enter your choice: '
    jrunoptions=("Go to previous branch" "Create New Branch" "Create New Branch Start" "Find branch" "Quit")
    select opt in "${jrunoptions[@]}"
    do
        case $opt in
            "Go to previous branch")
                JIRA_ID=$(grl | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Create New Branch")
                jcreate $BASE_BRANCH
                return
                ;;
            "Create New Branch Start")
                jcreate $BASE_BRANCH
                JIRA_ID=$(grep issue /tmp/cstory.yml | awk '{print $2}')
                jinit $JIRA_ID
                return
                ;;
            "Find branch")
                JIRA_ID=$(git branch | fzf | awk -F'-' '{print $2;}')
                jinit $JIRA_ID
                break
                ;;
            "Quit")
                break
                ;;
            *) echo "invalid option $REPLY";;
        esac
    done
  fi
}

jassign() {
  JIRA_ID=$1
  if [[ $JIRA_ID ]]; then
    ASSIGNEE="users.$(echo $JIRA_USERNAMES | fzf)"
    ASSIGNEE_ID=$(getConfigValue $ASSIGNEE)
    jira edit --noedit "$JIRA_ID" -o assigneeid="$ASSIGNEE_ID"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jqa() {
  JIRA_ID=$1
  if [[ $JIRA_ID ]]; then
    ticketStatus="$(jira status $JIRA_ID)"
    if [ "$ticketStatus" = "To Do" ]; then 
      jira transition "In Progress" $JIRA_ID --noedit
      jira transition "Code Review" $JIRA_ID --noedit
    fi
    if [ "$ticketStatus" = "In Progress" ]; then 
      jira transition "Code Review" $JIRA_ID --noedit
    fi
    jira transition "QA Ready" $JIRA_ID --noedit
    ASSIGNEE_ID=$(getConfigValue "users.wesley")
    jira edit --noedit "$JIRA_ID" -o assigneeid="$ASSIGNEE_ID"
  else
    echo "JIRAQA: need to have ISSUE_ID"
  fi
}

jtransition() {
  JIRA_ID=$1
  moveTo=$2
  if [ -z $JIRA_ID ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
  fi
  if [ -z $moveTo ]; then
    moveTo="$(echo $JIRA_WORKFLOW | fzf)"
  fi
  ticketStatus="$(jira status $JIRA_ID)"
  if [ "$ticketStatus" = "$moveTo" ]; then 
    echo "JIRA: Already on $moveTo status"
    return
  fi
  jira transition "$moveTo" $JIRA_ID --noedit
}

jcreate () {
  BASEBRANCH="master"
  if [ $1 ]; then
    BASEBRANCH=$1
  fi
  TYPE="$(echo 'Task\nBug' | fzf)"
  ASSIGNEE="users.$(echo $JIRA_USERNAMES | fzf)"
  ASSIGNEE_ID=$(getConfigValue $ASSIGNEE)
  git checkout $BASEBRANCH && git pull
  jira create -i "$TYPE" -o assigneeid="$ASSIGNEE_ID" --saveFile /tmp/cstory.yml

  jopen $JIRA_ID
}

jopennotes() {
  # Todo: Open tvim if you set it in param. Was not as easy as I thought
  JIRA_ID=$1

  BRANCHNAME=$(jira branch $JIRA_ID)
  CURRENT_BRANCH=$(git branch --show-current)
  PROJECT="$(echo $BRANCHNAME | awk -F'-' '{print $1;}' | tr '[:upper:]' '[:lower:]')"

  if [ $CURRENT_BRANCH != $BRANCHNAME ]; then
    git checkout $BRANCHNAME
  fi

  NOTES_PROJECTPATH="$HOME/Documents/Notes/$PROJECT"

  # TODO: There is too much conflict whene using the branchname as md. In future
  # would like to change this to JIRA_ID. I can see that this could have issues
  # with the branch association to jira task in future. This might need to be
  # resolved by getting the bitbucket ids associated in there too. food for
  # thought

  BRANCH_MD_PATH="$NOTES_PROJECTPATH/$BRANCHNAME.md"

  # Update Meta data
  # Note: Limitation is that we predict that its 12 lines of metddata. Would
  # like to make this a little better in future
  if [ -f "$BRANCH_MD_PATH" ]; then
    # Check first line
    HEAD_LINE=$(head -n 1 $BRANCH_MD_PATH)
    if [ "$HEAD_LINE" = "---" ]; then
      ##Temp file
      BRANCH_MD_TEMP_PATH="$BRANCH_MD_PATH.temp"
      touch $BRANCH_MD_TEMP_PATH

      ## TODO: if has lines
      ## Remove mardown meta 12 lines
      sed -i.bak '1,14d' "$BRANCH_MD_PATH"

      ## Make temp version
      cat "$BRANCH_MD_PATH" > "$BRANCH_MD_TEMP_PATH"

      ## Add new markdown meta
      jira view $JIRA_ID > "$BRANCH_MD_PATH"
      cat "$BRANCH_MD_TEMP_PATH" >> "$BRANCH_MD_PATH"
      ## clean up
      rm "$BRANCH_MD_TEMP_PATH"
    fi
  else
    touch "$BRANCH_MD_PATH"
    jira view $JIRA_ID > "$BRANCH_MD_PATH"
    echo "\n## Notes\n- " >> "$BRANCH_MD_PATH"
  fi
}

jopennotes_tmux() {
  JIRA_ID=$1

  # limitation to having the second pane to always have vim running with notes
  # note this is a hack atm. would like to make this more specific
  tmux select-window -t :-
  tmux send-keys -t 2 ":w"
  tmux send-keys -t 2 Enter
  tmux send-keys -t 2 ":q"
  tmux send-keys -t 2 Enter

  jopennotes $JIRA_ID

  tmux send-keys -t 2 "tvim"
  tmux send-keys -t 2 Enter
}

jnotes() {
	PROJECT='divi'
	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  if [[ -z "$1" ]]; then
    SEARCH='\- \[ \]'
  else
    SEARCH="$( echo $1 | sed 's/\([^[:alnum:]]\)/\\\1/g' | tr '[:upper:]' '[:lower:]')"
  fi

  TODOSELECT=$(awk 'function branchname(file) {
    sub(".*/", "", file)
    sub("\.md", "", file)
    return file
  }
  tolower($0) ~ /'$SEARCH'/{print branchname(FILENAME), "---", $0}' $PROJECTPATH/* | fzf)

  if [ $TODOSELECT ]; then
    BRANCHNAME=${TODOSELECT%% ---*} # Delete after
    # BRANCHNAME=${TODOSELECT##*------- } # Delete before
    tvim "$BRANCHNAME"
  fi
}

jcheckout() {
  JIRA_ID=$1
  BRANCHNAME=$(jira branch $JIRA_ID)
  if git rev-parse --verify $BRANCHNAME; then
    git checkout $BRANCHNAME
  else
    git checkout -b $BRANCHNAME
  fi
}

jinit() {
  JIRA_ID=$1
  jhstart $JIRA_ID
  jira transition "In Progress" $JIRA_ID --noedit
  jcheckout $JIRA_ID
  jopennotes_tmux $JIRA_ID
  jopen $JIRA_ID
}

jopen() {
  JIRA_ID=$1
  if [ -z $JIRA_ID ]; then
    JIRA_ID=$(grl | awk -F'-' '{print $2;}')
  fi
  JIRA_ID_TAB_EXISTS=$(chrome-cli list tabs | grep "$JIRA_ID")
  # Note need to enable chrome-cli in order for this to work
  if [ -z $JIRA_ID_TAB_EXISTS ] ; then
      $SCRIPT_PATH/openProfileInChrome/openInChromeSide.sh https://portableaustralia.atlassian.net/browse/$( git branch | grep '*' | cut -d ' ' -f2 | awk -F'-' '{print $1_-$2}')
  else
    echo "Tob already open"
  fi
}
