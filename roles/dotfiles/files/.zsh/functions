# Until .agrc exists...
# (https://github.com/ggreer/the_silver_searcher/pull/709)
function ag() {
  emulate -L zsh

  # italic blue paths, pink line numbers, underlined purple matches
  command ag --pager="less -iFMRSX" --color-path=34\;3 --color-line-number=35 --color-match=35\;1\;4 "$@"
}

# Using Argsdo instead through vim
# function search_replace() {
#   PATTERN=$1
#   REPLACEMENT=$1
#
#   if [ $2 ]; then
#     ag -l "$PATTERN" | xargs sed -i -e 's/'$PATTERN'/'$REPLACEMENT'/g';
#   else
#     echo 'Need two parameters';
#   fi
# }

# Marked 2 start
function mark() {
  if [ $1 ]; then
    open -a "Marked 2" $1;
  else
    open -a "Marked 2";
  fi
}

# fd - "find directory"
# From: https://github.com/junegunn/fzf/wiki/examples#changing-directory
function fd() {
  local DIR
  DIR=$(bfs ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$DIR"
}

# fh - "find [in] history"
# From: https://github.com/junegunn/fzf/wiki/examples#command-history
function fh() {
  print -z $(fc -l 1 | fzf +s --tac | sed 's/ *[0-9]* *//')
}

function history() {
  emulate -L zsh

  # This is a function because Zsh aliases can't take arguments.
  local DEFAULT=-1000
  builtin history ${1:-$DEFAULT}
}

function mosh() {
  emulate -L zsh

  if [[ -z "$@" ]]; then
    # common case: getting to my workstation
    command mosh -6 sandbox
  else
    command mosh "$@"
  fi
}

function mvim() {
  emulate -L zsh

  # Makes user-installed fonts visible to MacVim.
  if which reattach-to-user-namespace &> /dev/null ; then
    reattach-to-user-namespace mvim
  else
    command mvim
  fi
}

function scratch() {
  local SCRATCH=$(mktemp -d)
  echo 'Spawing subshell in scratch directory:'
  echo "  $SCRATCH"
  (cd $SCRATCH; zsh)
  echo "Removing scratch directory"
  rm -r "$SCRATCH"
}

function ssh() {
  emulate -L zsh

  if [[ -z "$@" ]]; then
    # common case: getting to my workstation
    command ssh sandbox-clipper
  else
    local LOCAL_TERM=$(echo -n "$TERM" | sed -e s/tmux/screen/)
    env TERM=$LOCAL_TERM command ssh "$@"
  fi
}

# function tmux() {
#   emulate -L zsh
#
#   # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
#   # (Inspired by: https://gist.github.com/lann/6771001)
#   local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
#   if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
#     ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
#   fi
#
#   # If provided with args, pass them through.
#   if [[ -n "$@" ]]; then
#     env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
#     return
#   fi
#
#   # Check for .tmux file (poor man's Tmuxinator).
#   if [ -x .tmux ]; then
#     # Prompt the first time we see a given .tmux file before running it.
#     local DIGEST="$(openssl sha -sha512 .tmux)"
#     if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
#       cat .tmux
#       read -k 1 -r \
#         'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
#       echo
#       if [[ $REPLY =~ ^[Tt]$ ]]; then
#         echo "$DIGEST" >> ~/..tmux.digests
#         ./.tmux
#         return
#       fi
#     else
#       ./.tmux
#       return
#     fi
#   fi
#
#   # Attach to existing session, or create one, based on current directory.
#   SESSION_NAME=$(basename "$(pwd)")
#   env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
# }

# Bounce the Dock icon, if iTerm does not have focus.
function bounce() {
  if [ -n "$TMUX" ]; then
    print -Pn "\ePtmux;\e\e]1337;RequestAttention=1\a\e\\"
  else
    print -Pn "\e]1337;RequestAttention=1\a"
  fi
}

# regmv = regex + mv (mv with regex parameter specification)
#   example: regmv '/\.tif$/.tiff/' *
#   replaces .tif with .tiff for all files in current dir
#   must quote the regex otherwise "\." becomes "."
# limitations: ? doesn't seem to work in the regex, nor *
regmv() {
  emulate -L zsh

  if [ $# -lt 2 ]; then
    echo "  Usage: regmv 'regex' file(s)"
    echo "  Where:       'regex' should be of the format '/find/replace/'"
    echo "Example: regmv '/\.tif\$/.tiff/' *"
    echo "   Note: Must quote/escape the regex otherwise \"\.\" becomes \".\""
    return 1
  fi
  local regex="$1"
  shift
  while [ -n "$1" ]
  do
    local newname=$(echo "$1" | sed "s${regex}g")
    if [ "${newname}" != "$1" ]; then
      mv -i -v "$1" "$newname"
    fi
    shift
  done
}

# function email() {
#   if ! tmux has-session -t email 2> /dev/null; then
#     # Make saved attachments go to ~/Downloads by default.
#   if ! tmux has-session -t email 2> /dev/null; then
#     # Make saved attachments go to ~/Downloads by default.
#     tmux new-session -d -s email -c ~/Downloads -n mutt
#     tmux send-keys -t email:mutt mutt Enter
#     tmux new-window -t email -c ~/.mutt -n sync
#     tmux send-keys -t email:sync '~/.mutt/scripts/control.sh --daemon' Enter
#     tmux split-window -t email:sync -v -f -l 8 -c ~/.mutt
#     tmux send-keys -t email:sync.bottom '~/.mutt/scripts/control.sh' Enter
#   fi
#   if [ -z "$TMUX" ]; then
#     tmux attach -t email:mutt
#   else
#     tmux switch-client -t email:mutt
#   fi
# }

# Convenience function for jumping to hashed directory aliases
# (ie. `j rn` -> `jump rn` -> `cd ~rn`).
function jump() {
  emulate -L zsh

  if [ $# -eq 0 ]; then
    cd -
  elif [ $# -gt 1 ]; then
    echo "jump: single argument required, got $#"
    return 1
  else
    if [ $(hash -d|cut -d= -f1|grep -c "^$1\$") = 0 ]; then
      # Not in `hash -d`: assume it's just a dir.
      cd $1
    else
      cd ~$1
    fi
  fi
}

function _jump_complete() {
  emulate -L zsh
  local word completions
  word="$1"
  completions="$(hash -d|cut -d= -f1)"
  reply=( "${(ps:\n:)completions}" )
}

# Complete filenames and `hash -d` entries.
compctl -f -K _jump_complete jump

# WriteRoom-style focused workspace.
function wr() {
  emulate -L zsh

  local THRESHOLD=200
  local COLS=$(tput cols)
  if ! tmux has-session -t WriteRoom 2> /dev/null; then
    tmux new-session -d -s WriteRoom -c ~/Documents/Corpus -x $(tput cols) -y $(tput lines)
    # TODO: something less clowny here (want width of created session, not width
    # of current pane).
    if [ "$COLS" -gt "$THRESHOLD" ]; then
      tmux split-window -t WriteRoom -h -p 25
      tmux split-window -t WriteRoom.1 -b -h -p 25
      tmux select-pane -t WriteRoom.2
      tmux send-keys -t WriteRoom.2 "vim -c CommandT" Enter
    else
      tmux send-keys -t WriteRoom "vim -c CommandT" Enter
    fi
  fi
  if [ -z "$TMUX" ]; then
    tmux attach -t WriteRoom
  else
    tmux switch-client -t WriteRoom
  fi
}

# "[t]ime[w]arp" by setting GIT_AUTHOR_DATE and GIT_COMMITTER_DATE.
function tw() {
  local TS=$(ts "$@")
  echo "Spawning subshell with timestamp: $TS"
  env GIT_AUTHOR_DATE="$TS" GIT_COMMITTER_DATE="$TS" zsh
}

# "tick" by incrementing GIT_AUTHOR_DATE and GIT_COMMITTER_DATE.
function tick() {
  emulate -L zsh

  if [ -z "$GIT_AUTHOR_DATE" -o -z "$GIT_COMMITTER_DATE" ]; then
    echo 'Expected $GIT_AUTHOR_DATE and $GIT_COMMITTER_DATE to be set.'
    echo 'Did you forget to timewarp with `tw`?'
  else
    # Fragile assumption: dates are in format produced by `tw`/`ts`.
    local TS=$(expr \
      $(echo $GIT_AUTHOR_DATE | cut -d ' ' -f 1) \
      $(parseoffset "$@") \
    )
    local TZ=$(date +%z)
    echo "Bumping timestamp to: $TS $TZ"
    export GIT_AUTHOR_DATE="$TS $TZ"
    export GIT_COMMITTER_DATE="$TS $TZ"
  fi
}

#----
# Downloads Folder
pickdwldfiles() {
dwldfolder=$(find "$HOME/Downloads" -mindepth 1 -print0 | xargs -0 stat -f "%m %N" | sort -rn | cut -f2- -d" ");
# | sed -e 's/\( \|(\|)\)/\\\1/g' -e 's/[[:space:]]*$//');
echo "$dwldfolder" | fzf --multi --preview "head -$LINES {}"
}

fromd() { IFS=$'\n'; a=$(pwd); for file in $(pickdwldfiles); do; mv "$file" "$a"; done; }
removed() { IFS=$'\n'; for file in $(pickdwldfiles); do; rm "$file"; done; }

# Make string to file name format. Spaces to underscores. Remove all special characters
string_() { echo $1 | tr -d ':' | tr -d '#' | sed -e 's/^[[:space:]]*//' | tr -s ' ' | tr ' ' '_'}

mkdir_() { mkdir $(string_ $1)}

linestofolders() { while read line; do mkdir_ "$line"; done < $1}

fr() {
  perl -pi -e "s/$1/$2/g" $3;
}

curl_json_post() {
  if [ -n "$2" ] ; then
    curl $1
  fi
}

curl_file_upload() {
  if [ -n "$2" ] ; then
    curl -F 'filesToUpload[]=\@'$1 $2;
  fi
}

kall() {  osascript -e 'tell application "System Events" to get name of (processes where background only is false)' | sed "s/iTerm2//;s/Google\ Chrome//;s/Todoist//;s/Slack//;s/1pass//;s/Calendar//;s/Hammerspoon//;s/Karabiner-Elements//;s/Notion//;" | tr , "\n" | xargs -I {} osascript -e 'quit app "{}"' \; }

#ack
vack() {
  if [ -n "$2" ] ; then
    docs=$(ag --nobreak --nonumbers --noheading -l $2 "$1")
  else
    docs=$(ag --nobreak --nonumbers --noheading -l "$1") &&
    fi
  doc=$(echo "$docs" | fzf --multi --preview "head -$LINES {}" ) &&
  ${EDITOR} $( echo "$doc" | tr '\r\n' ' ');
}

#find
vfind() {
  if [ -n "$2" ] ; then
    docs=$(ag --nobreak --nonumbers --noheading -g $2 "$1")
  else
    docs=$(ag --nobreak --nonumbers --noheading -g "$1") &&
  fi
  doc=$(echo "$docs" | fzf --multi --preview "head -$LINES {}" ) &&
  ${EDITOR} -p $( echo "$doc" | tr '\r\n' ' ');
}


todoistsync() {
  todoist sync;
  todoist list --filter "today" | grep "Linktree" | cut -f12- -d" " | awk '{$1=$1;print}' | pbcopy;
}

# Url decode / encode
url_decode() { php -r "echo urldecode(\"$1\");" }
url_encode() { php -r "echo urlencode(\"$1\");" }

# alias urldecode='python -c "import sys, urllib as ul;  print ul.unquote_plus(sys.argv[1])"'
# alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'

notify() {
  if [[ -z "$1" ]] then
    TEXT="We made it!"
  else
    TEXT=$1
  fi
  osascript -e 'display notification "'$TEXT'" with title "Script Completed"' 
}

tvim() { 
	PROJECT='divi'
	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  if [[ -z "$1" ]] then
    BRANCHNAME=$(git branchname)
  else
    BRANCHNAME=$1
  fi

  if [[ -z "$2" ]] then
    # issue where if you open a folder, Cmd T will default to open to a non
    # folder pane. This can be imporved.
    FILE=$(git diff HEAD --name-only | tr '\r\n' ' ')
  else
    FILE=$2
  fi

  # resize window on load and open notes
  vim -O -c ":vertical resize 80" \
      -c ":wincmd l"\
      $(echo $FILE | head -n1 | awk '{print $1; }') "$PROJECTPATH/$BRANCHNAME.md";
      # -c ":badd $FILE";
}

divitodos() {
	PROJECT='divi'
	PROJECTPATH="$HOME/Documents/Notes/$PROJECT"
  TODOSELECT=$(awk 'function branchname(file) {
    sub(".*/", "", file)
    sub("\.md", "", file)
    return file
  }
  /\- \[ \]/{print branchname(FILENAME), "---", $0}' $PROJECTPATH/* | fzf)

  if [ $TODOSELECT ]; then
    BRANCHNAME=${TODOSELECT%% ---*} # Delete after
    # BRANCHNAME=${TODOSELECT##*------- } # Delete before
    tvim "$BRANCHNAME"
  fi
}

showcsv() {
  column -s, -t < $1 | less -#2 -N -S
}

source $HOME/.zsh/resource/bulknaming
source $HOME/.zsh/resource/git
source $HOME/.zsh/resource/linktree
source $HOME/.zsh/resource/jira
# source $HOME/.zsh/resource/ubuntu
# source $HOME/.zsh/resource/twenty4

