snippet license "license" b
/**
 * Copyright 2019-present Greg Hurrell. All rights reserved.
 * Licensed under the terms of the MIT license.
 */
$1
endsnippet

#
# Flow
#

snippet flow "flow" b
/**
 * @flow
 */

${1:`!p snip.rv = snip.basename or 'ModuleName'`}$0

module.exports = $1;
endsnippet

snippet pretty "pretty-print JSON-able data" b
console.log(
  JSON.stringify({
    $1
  }, null, 2)
);
endsnippet

#
# React
#

global !p
"""
Checks the current buffer to see whether React ES6 syntax should be used.
"""
def react_es6():
	buffer = vim.current.buffer
	for line in buffer:
		if re.search('React.createClass', line):
			return False;
	return True;
endglobal


# React & JSX
snippet rrcc "React Redux Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import styles from './${2:$1}.css';

class ${1:`!v expand('%:t:r')`} extends Component {
	static propTypes = {
		children: PropTypes.node,
		className: PropTypes.string,
		dispatch: PropTypes.func.isRequired,
	};

	constructor(props) {
		super(props);
	}

	render() {
		return (
			<div className={styles.base}>
				$3
			</div>
		);
	}
}
endsnippet

snippet rcc "React Class Component" b
import React from 'react'
import styles from "./styles.module.scss"

class ${1:`!v expand('%:t:r')`}:React extends React.Component {

	constructor(props) {
		super(props)
	}

	componentDidMount() {
		$3
	}

	componentWillUnmount() {
		$3
	}

	render() {
		return (
			${0:${VISUAL}}
		);
	}
}

export default $1;
endsnippet

snippet rsc "React Stateless Component" b
import React from 'react';
import styles from "./styles.module.scss"

interface Props {
  $2: ${3: string}
}

const ${1: $1}: React.StatelessComponent<Props> = ({ $2 }) => {
	return (
		<${4:div} className={styles.container}>
			$0
		</$4>
	)
}

export default $1;
endsnippet

snippet set "Set State"
this.setState({
	${1}: ${2}
});
endsnippet


snippet cc "createClass" b
const ${1:`!p snip.rv = re.sub('\.react$', '', snip.basename or 'ModuleName')`} = React.createClass({

		$0
	}
});

module.exports = $1;
endsnippet

snippet cdm "componentDidMount" b
componentDidMount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate`!p snip.rv = '' if react_es6() else ': function'`(prevProps, prevState) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwm "componentWillMount" b
componentWillMount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps`!p snip.rv = '' if react_es6() else ': function'`(nextProps) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount`!p snip.rv = '' if react_es6() else ': function'`() {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate`!p snip.rv = '' if react_es6() else ': function'`(nextProps, nextState) {
	$0
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

snippet gdp "getDefaultProps" b
getDefaultProps: function() {
	return {
		$0
	};
},
endsnippet

snippet gis "getInitialState" b
getInitialState: function() {
	return {
		$0
	};
},
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate`!p snip.rv = '' if react_es6() else ': function'`(nextProps, nextState) {
	return ${1:true};
}`!p snip.rv = '' if react_es6() else ','`
endsnippet

#
# console methods
#

snippet dir "console.dir"
console.dir(${1});
endsnippet

snippet log "console.log"
console.log(${1});
endsnippet

snippet time "console.time"
console.time('${1}');
endsnippet

snippet end "console.timeEnd"
console.timeEnd('${1}');
endsnippet

snippet warn "console.warn"
console.warn(${1});
endsnippet

#
# other
#

snippet ** "docblock" b
/**
${VISUAL:/((?m)^)/ * /g}$0
 */
endsnippet

snippet "func?" "function" !r
function${1: name}(${2:arg}) {
	$0
}
endsnippet

snippet "imp(o|or|ort)?" "import" !br
import ${1:Module} from '${2}$1${3}';
endsnippet

snippet "imp{}" "import {}" !br
import { ${1:Module} } from '${3}$2${4}';
endsnippet

snippet "req(u|ui|uir|uire)?" "require" !br
const ${1:ModuleName} = require('${2}$1${3}');
endsnippet

snippet "type" "import type" !br
import type {${1:Type}} from '${2}$1${3}';
endsnippet

snippet "(use|strict)" "'use strict' declaration" br
'use strict';
endsnippet


# React & JSX
snippet <> "- Place a custom tag and cursors" w
<${1:}></$1>
endsnippet

snippet div "- Plain div" b
<div></div>
endsnippet

snippet divc "Place a div using class" b
<div className="$1"></div>
endsnippet

snippet div# "<div> with ID & class" w
<div`!p snip.rv=' id="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""``!p snip.rv=' className="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""`>
	${0:${VISUAL}}
</div>
endsnippet

snippet div. "<div> with class" w
<div`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`>
	${0:${VISUAL}}
</div>
endsnippet

snippet a "Link" w
<a href="${1:http://www.${2:url.com}}"${3: target="_blank"}>${4:Anchor Text}</a>
endsnippet

snippet address "<address>" w
<address>$1</address>
endsnippet

snippet b "<b>" w
<b>$1</b>
endsnippet

snippet button "<button>"
<button>$1</button>
endsnippet

snippet img "place a <img>"
<img src="$1" alt="$2">
endsnippet

snippet li "place a list" w
<li>${0:${VISUAL}}</li>
endsnippet

snippet ol "place a <ol>"
<ol>
	<li>$1</li>
</ol>
endsnippet

snippet dl "place a <dl>"
<dl>
	<dt>$1</dt><dd></dd>
</dl>
endsnippet

snippet p "paragraph" w
<p>${0:${VISUAL}}</p>
endsnippet

snippet select "Select Box" w
<select name="${1:some_name}" id="${2:$1}"${3:${4: multiple}${5: size="${6:1}"}}>
	${0:${VISUAL}}
</select>
endsnippet

snippet strong "<strong>" w
<strong>$1</strong>
endsnippet

snippet table "HTML <table>" w
<table>
${0:${VISUAL}}
</table>
endsnippet

snippet span "<span>" w
<span> ${0:${VISUAL}} </span>
endsnippet

snippet const "const" w
const $1 = $2
endsnippet

snippet const() "const ()" w
const $1 = ($2) => {
	return $3
}
endsnippet

snippet const{}p "const props" w
const { $1 } = this.props
endsnippet

snippet const{} "const {}" w
const {$2} = $1
endsnippet

snippet span# "<span> with ID & className" w
<span`!p snip.rv=' id="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""``!p snip.rv=' className="' if t[2] else ""`${2:name}`!p snip.rv = '"' if t[2] else ""`> ${0:${VISUAL}} </span>
endsnippet

snippet span. "<span> with className" w
<span`!p snip.rv=' className="' if t[1] else ""`${1:name}`!p snip.rv = '"' if t[1] else ""`> ${0:${VISUAL}} </span>
endsnippet

snippet cn "place a className" w
className="$1"
endsnippet

snippet mailto "XHTML <a mailto: >" w
<a href="mailto:${1:joe@example.com}?subject=${2:feedback}">${3:email me}</a>
endsnippet

snippet textarea "XHTML   <textarea>" w
<textarea name="${1:Name}" rows="${2:8}" cols="${3:40}">$0</textarea>
endsnippet

snippet form "XHTML <form>" w
<form action="${1:`!p
snip.rv = (snip.basename or 'unnamed') + '_submit'
`}" method="${2:get}" accept-charset="utf-8">
	$0
	<p><input type="submit" value="Continue â†’"`!p x(snip)`></p>
</form>
endsnippet

snippet propTypes "propTypes" w:
$1.propTypes = {
	chlidren: PropTypes.node.isRequired,
	$2: PropTypes.$3,
}

$1.defaultProps = {
	$2: ${4:undefined},
}
endsnippet

snippet reactImport "init page" w:
import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
endsnippet
