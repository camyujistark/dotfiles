if v:progname == 'vi'
  set noloadplugins
endif

let mapleader="\<Space>"
let maplocalleader="\\"

" Extension -> filetype mappings.
let filetype_m='objc'
let filetype_pl='prolog'

" Stark highlighting is enough to see the current match; don't need the
" centering, which can be annoying.
let g:LoupeCenterResults=0

" And it turns out that if we're going to turn off the centering, we don't even
" need the mappings; see: https://github.com/wincent/loupe/pull/15
map <Nop><F1> <Plug>(LoupeN)
nmap <Nop><F2> <Plug>(Loupen)

" Would be useful mappings, but they interfere with my default window movement
" bindings (<C-j> and <C-k>).
let g:NERDTreeMapJumpPrevSibling='<Nop>'
let g:NERDTreeMapJumpNextSibling='<Nop>'

let g:NERDTreeCaseSensitiveSort=1

" Prevent tcomment from making a zillion mappings (we just want the operator).
let g:tcomment_mapleader1=''
let g:tcomment_mapleader2=''
let g:tcomment_mapleader_comment_anyway=''
let g:tcomment_textobject_inlinecomment=''

" The default (g<) is a bit awkward to type.
let g:tcomment_mapleader_uncomment_anyway='gu'

" Turn off most of the features of this plug-in; I really just want the folding.
let g:vim_markdown_override_foldtext=0
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_emphasis_multiline=0
let g:vim_markdown_conceal=0
let g:vim_markdown_frontmatter=1
let g:vim_markdown_new_list_item_indent=0

let g:LanguageClient_useFloatingHover=1
let g:LanguageClient_hoverPreview='Always'
let g:LanguageClient_diagnosticsDisplay={
      \   1: {'signTexthl': 'LineNr', 'virtualTexthl': 'User8'},
      \   2: {'signTexthl': 'LineNr', 'virtualTexthl': 'User8'},
      \   3: {'signTexthl': 'LineNr', 'virtualTexthl': 'User8'},
      \   4: {'signTexthl': 'LineNr', 'virtualTexthl': 'User8'},
      \ }

let g:LanguageClient_serverCommands={}

let g:LanguageClient_rootMarkers={}


let g:LanguageClient_diagnosticsList='Location'

if filereadable('/usr/local/bin/python3')
  " Avoid search, speeding up start-up.
  let g:python3_host_prog='/usr/local/bin/python3'
endif

" Normally <leader>s (mnemonic: "[s]earch");
" use <leader>f instead (mnemonic: "[f]ind")
nmap <leader>f <Plug>(FerretAckWord)

" Normally <leader>r (mnemonic: "[r]eplace");
" use <leader>s (mnemonic: "[s]ubstitute") instead.
nmap <leader>s <Plug>(FerretAcks)

" Allow for per-machine overrides in ~/.vim/host/$HOSTNAME.vim and
" ~/.vim/vimrc.local.
let s:hostfile =
      \ $HOME .
      \ '/.vim/host/' .
      \ substitute(hostname(), "\\..*", '', '') .
      \ '.vim'
if filereadable(s:hostfile)
  execute 'source ' . s:hostfile
endif

let s:vimrc_local=$HOME . '/.vim/vimrc.local'
if filereadable(s:vimrc_local)
  execute 'source ' . s:vimrc_local
endif

if has('gui')
  " Turn off scrollbars. (Default on macOS is "egmrL").
  set guioptions-=L
  set guioptions-=R
  set guioptions-=b
  set guioptions-=l
  set guioptions-=r
endif

set rtp+=/home/cam/.fzf

if &loadplugins
  if has('packages')
    packadd! harpoon
    packadd! vim-doge
    packadd! vim-jsdoc
    packadd! plenary.nvim
    packadd! diffview.nvim
    packadd! nvim-web-devicons
    packadd! catpuccin-vim
    packadd! coc.nvim
    packadd! fzf
    packadd! fzf.vim
    packadd! ferret
    packadd! loupe
    packadd! copilot.vim
    packadd! pinnacle
    packadd! replay
    packadd! scalpel
    packadd! tcomment_vim
    packadd! terminus
    packadd! twig.vim
    packadd! ultisnips
    packadd! vcs-jump
    packadd! vim-ansible-yaml
    packadd! vim-dispatch
    packadd! vim-docvim
    packadd! vim-easydir
    packadd! vim-eunuch
    packadd! vim-fugitive
    packadd! vim-git
    packadd! vim-javascript
    packadd! vim-json
    packadd! vim-jsx
    packadd! vim-lion
    packadd! vim-markdown
    packadd! vim-mdx
    packadd! vim-operator-user
    packadd! vim-projectionist
    packadd! vim-reason-plus
    packadd! vim-repeat
    packadd! vim-signature
    packadd! vim-soy
    packadd! vim-speeddating
    packadd! vim-surround
    packadd! vim-textobj-comment
    packadd! vim-textobj-rubyblock
    packadd! vim-textobj-user
    packadd! vim-zsh
    packadd! yats.vim
    packadd! vim-gitgutter
  else
    source $HOME/.vim/pack/bundle/opt/vim-pathogen/autoload/pathogen.vim
    call pathogen#infect('pack/bundle/opt/{}')
  endif
endif

" Automatic, language-dependent indentation, syntax coloring and other
" functionality.
"
" Must come *after* the `:packadd!` calls above otherwise the contents of
" package "ftdetect" directories won't be evaluated.
filetype indent plugin on
let g:jsx_ext_required = 0

" After this file is sourced, plugin code will be evaluated.
" See ~/.vim/after for files evaluated after that.
" See `:scriptnames` for a list of all scripts, in evaluation order.
" Launch Vim with `vim --startuptime vim.log` for profiling info.
"
" To see all leader mappings, including those from plugins:
"
"   vim -c 'set t_te=' -c 'set t_ti=' -c 'map <space>' -c q | sort

" Error where tsx files were getting recognized as ts files 
" :set ft
autocmd BufNewFile,BufRead *.tsx set filetype=typescriptreact

autocmd BufNewFile,BufRead *.jsx set filetype=javascriptreact

let s:uname = system("echo -n \"$(uname)\"")

if !v:shell_error && s:uname == "Linux"

  " let g:clipboard = {
  "       \   'name': 'win32yank-wsl',
  "       \   'copy': {
  "       \      '+': '/usr/local/bin/win32yank.exe -i --crlf',
  "       \      '*': '/usr/local/bin/win32yank.exe -i --crlf',
  "       \    },
  "       \   'paste': {
  "       \      '+': '/usr/local/bin/win32yank.exe -o --lf',
  "       \      '*': '/usr/local/bin/win32yank.exe -o --lf',
  "       \   },
  "       \   'cache_enabled': 0,
  "       \ }

elseif !v:shell_error && s:uname == "Darwin"
endif
